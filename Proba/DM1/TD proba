1) 1-1/2^3 = 7/8
2) n*7/8
3) n'=0, nombre de clause -> n 1.affecte aléatoirement les variables, 2.modifie la valeur d'une variable v choisie au hasard, 3.nombre de clauses satisfaites -> m, 4.si m<n' : modifie v sinon (si m/n>=7/8 : return affectation sinon m->n'), 5.goto 3.
4) il satisfait 7n/8 clauses, nopt<=n => 7n/8>=7nopt/8 donc alpha=7/8
5) le même algorithme s'arrêtant pour m/n>=1-1/2^k satisfait au minimum n*(1-1/2^k) clauses donc au moins nopt*(1-1/2^k) clauses et est donc une (1-1/2^k)-approximation.

1) - Si Sj >= 1 alors il existe un i tq ((vi=1 ET xi appartient à Cj) OU (vi=0 ET non-xi appartient à Cj)). Donc Cj est vraie car xi (resp. non-xi) est vrai.
- Inversement, Cj est vraie => il existe un xi vrai (resp faux) tel que xi (resp non-xi) appartient à Cj. Donc vi (resp 1-vi) = 1 et fait partie de la somme de positifs Sj donc Sj >= 1.
2) - Max-sat consiste en la maximisation du nombre de clauses vraies, c'est équivalent à maximiser le nombre de j tels que Sj>=1 (car on a vu au 1. que Sj>=1 <=> Cj vraie), si on pose Sj>=zj cela revient à maximiser le nombre de j tels que zj=1, ce qui revient à maximiser la somme des zj car zj appartient à {0,1}.
- Cette suite d'équivalences prouve que Max-sat <=> maximisation de S(zj) où Sj>=zj.
3) pour tout j on a Sj>=zj*. Comme zj* est optimal et compris entre 0 et 1 on a zj=Sj si Sj<1 et zj=1 sinon.
Donc S(zj*)=S(Sj)[Sj<1]+S(1)[Sj>=1] >= S(1)[Sj>=1] = nombre de j tels que Sj>=1 pour une affectation optimale = nombre max de clauses satisfiables. S(zj*) >= nombre max de clauses satisfiables.
4) On peut choisir que pour tout i (resp. j) : vi (resp. zj) = 1 avec une probabilité vi* (resp. zj*), 0 sinon.
5) On note li chaque littéral de Cj.
Or, l'arrondi proposé est tel que pour tout li on a : proba(li vrai) = {- vi* si xi appartient à Cj
- 1-vi* sinon
car vi* = proba(vi=1).
On a également la somme pour une affectation optimale : Sj*=S(vi*)[xi in Cj]+S(1-vi*)[non-xi in Cj] ce qui correspond à l'espérance du nombre de li vrais.
Or proba(li vrai) = espérance du nombre de li vrais / nombre de li dans Cj, donc pour une clause contenant k littéraux on a pour tout li de Cj : proba(li vrai) = Sj*/k.
Comme Sj*>=zj* (contrainte sur zj*) on a proba(li vrai) >= zj*/k
Cj est satisfaite si au moins un des li est vrai => proba(Cj satisfaite) = 1 - proba(tous les li sont faux) = 1 - proba(li faux)^k = 1 - (1 - proba(li vrai))^k
Comme on a proba(li vrai) >= zj*/k on a
on a		(1 - proba(li vrai))^k	<= (1 - zj*/k)^k
donc	    1 - (1 - proba(li vrai))^k	>= 1 - (1 - zj*/k)^k
et		  proba(Cj satisfaite)	>= 1 - (1 - zj*/k)^k
zj* appartient à [0,1] donc 1 - (1 - zj*/k)^k >= bk.zj* >= bk.zj
d'où proba(Cj satisfaite) >= bk.zj*
6) e(x)>=1+x donc e(-1/k) >= 1-1/k donc e(-1) >= (1-1/k)^k donc 1-1/e <= 1-(1-1/k)^k
7) Comme il existe un algorithme résolvant le problème de la question 2 en temps polynomial (optimisation linéaire) il suffit d'appliquer notre arrondi aux sorties de cet algorithme pour obtenir un algorithme pour Max-sat en temps polynomial.
Comme une clause de k' littéraux est satisfaite par notre algorithme avec une probabilité >= bk'.zj*, et que pour tout k' bk'.zj*>=(1-1/e).zj* on a pour toute clause proba(Cj satisfaite) >= (1-1/e).zj*. Le nombre de clauses satisfaites par notre algorithme est donc >= S((1-1/e).zj*) = (1-1/e).S(zj*) = (1-1/e).nopt = a.nopt où a = (1-1/e) et l'algorithme est donc une (1-1/e)-approximation.
8) Pour Max-k-sat on a pour chaque clause une probabilité >= bk.zj* où k est constant pour chaque clause, donc le nombre de clauses satisfaites par l'algorithme est >= S(bk.zj*) = bk.S(zj*) = bk.nopt = a.nopt où a = bk et l'algorithme est donc une bk-approximation.

1) pour 1 : algo ex1 est une 1/2-approx	algo ex2 est une 1-approx
pour 2 : algo ex1 est une 3/4-approx	algo ex2 est une (3/4)-approx
pour 3 : algo ex1 est une 7/8-approx	algo ex2 est une (19/27)-approx
pour 4 : algo ex1 est une 15/16-approx	algo ex2 est une (175/256)-approx
pour 5 : algo ex1 est une 31/32-approx	algo ex2 est une (2101/3125)-approx
les algorithmes sont tous les deux une (3/4)-approx pour k=2
2) A la question 5 de l'exercice 1 on a trouvé que pour Sk l'algo 1 renvoyait une affectation à au moins n*(1-1/2^k) clauses vraies donc le nombre de clauses satisfaites par cet algorithme pour max-sat est >= S(n*(1-1/2^k))[k] = S(S(1-1/2^k)[Cj in Sk])[k]
3) A la question 8 de l'exercice 2 on a trouvé que pour Sk l'algo 2 renvoyait une affectation telle que chaque clause a une probabilité >= bk.zj* d'être vraie, donc l'espérance du nombre de clauses vraies dans Sk est S(bk.zj*)[Cj in Sk] et l'espérance du nombre total de clauses vraies est S(S(bk.zj*)[Cj in Sk])[k]
4) 1-2^-k+bk >= 2-2^-k-1/e = 2^-k <= 1/2-1/e
2-1/2^k-(1-1/k)^k
